#!/bin/bash
# -*- mode: shell-script -*-
#
# primarily does 3 things
#
# (*) check for existence of notebook in the student's space
#      create it if missing
# (*) make sure there is a notebook server ready and running for that couple student x course
# (*) return written on stdout as
#     action docker-name docker-port jupyter-token
#     with action in {created, restarted, running};
#       'created' is for when a container needed to be created
#       'restarted' is for when a suspended container was found and just restarted
#       'running' means the container was up and running already
#
# if forcecopy is set to force, then the master notebook is always copied
# into the student's space, even if pre existing

default_statics="media data"

COMMAND=$(basename $0)
USAGE="Usage: $COMMAND [-f] [-i dockerimage] [-s subdir] 
              nbhosting-root student course notebook
  -f : force copy of student notebook from master
  -i : specify docker image to use for that container
       default is course name - should of course have jupyter inside
       there are some assumptions made about that image,
       first version of nbhosting was developped for jupyter/scipy-notebook,
       hopefully it can run with others as well
  -s : (cumulative) add a static dir - defaults to ${default_statics}
  -d : turn on debug info"

statics=""
while getopts "fs:i:d" option; do
    case $option in
	f) forcecopy=true;;
	i) docker_image="$OPTARG";;
	s) statics="$statics $OPTARG";;
	d) debug=true;;
	?) printf "$USAGE"; exit 1;;
    esac
done	
shift $((OPTIND-1))

[[ "$#" =~ [4] ]] || { printf "$USAGE"; exit 1; }

# from config - typically /nbhosting
root=$1; shift
# student name - should exist as /nbhosting/students/$student
student=$1; shift
# course name - should exist as /nbhosting/courses/$course
course=$1; shift
# notebook path - should exist as /nbhosting/courses/$course/$notebook
notebook=$1; shift

# the defaults for static areas
[[ -z "$statics" ]] && statics="$default_statics"
# the default for the docker image
[[ -z "$docker_image" ]] && docker_image=$course

echo $root $student $course $notebook
echo options $forcecopy $statics $docker_image

exit 0

########## constants
# we use the docker container name as the auth token
# this avoids the necessity to wait for the connection file to be readable
# which can take some time

### various timeouts
# how long to wait for the port number to show up after a start
# this is 10 times .1s so 1s - proceed immediately
timeout_wait_for_port="10 .1 0"

# how long should we wait for the container to answer http
# trying to create 6 containers at the exact same time : 10 is not long enough
# then we wait an extra safety timeout
timeout_wait_for_http="20 1 3"

# all the verbosity goes to stderr as stdout is meant for the caller
function echo-stderr() {
    >&2 echo $(date "+%H:%M:%S") "$@"
}

function die() {
    echo-stderr "$@"
    exit 1
}

# globals
current_uid=$(id -un)

student_home=$root/students/$student
student_course=$student_home/$course
student_notebook=$student_course/$notebook
student_modules=$student_course/modules

####################
course_nbroot=$root/courses/$course
course_notebook=$course_nbroot/$notebook
course_modules=$root/modules/$course
course_jupyter=$root/jupyter/$course

docker_name=${course}-x-${student}

log=$root/logs/$course/run-$student.log

# rain check
[ -d $student_home ] || die student dir not found $student_home
[ -d $course_nbroot ] || die course notebooks dir not found $course_nbroot
[ -f $course_notebook ] || die master notebook not found in course $course_notebook
# not enforced yet
#[ $current_uid == $student ] || echo-stderr WARNING should be run as uid $student
[ -d $course_modules ] || echo-stderr WARNING $course_modules dir not found
for static in $statics; do
    course_static=$root/static/$course/$static
    [ -d $course_static ] || echo-stderr WARNING $course_static dir not found
done

# image : use the same name as the course
docker inspect --type image $course >& /dev/null || die image $course not known in docker

# create directory/ies leading to file <file>
function mkdir-for-file () {
    local filename=$1; shift
    local dir=$(dirname $filename)
    [ -d $dir ] || {
	echo-stderr Creating directory $dir for $filename
	sudo -u $student mkdir -p $dir
    }
}

# create symlink right where the notebook is, not only at the top
function create-symlink-at-file () {
    local filename=$1; shift
    local destination=$1; shift
    
    local dir=$(dirname $filename)
    local destname=$(basename $destination)
    # the symlink should
    # be in dir/ (like filename)
    # be named destname
    # and point at destination
    local source=$dir/$destname
    ln -sf $destination $dir/$destname
}

# make sure the student has a copy of the nodebook
function check-student-notebook() {
    # copy if student notebook is missing, or if force is requested
    if [ ! -f $student_notebook ] || [ "$forcecopy" == "force" ]; then
	mkdir-for-file $student_notebook
	echo-stderr Cloning $student_notebook from $course_notebook 
	# use rsync for preserving creation time
	sudo -u $student rsync -tp $course_notebook $student_notebook
	for static in $statics; do
	    create-symlink-at-file $student_notebook /home/jovyan/work/$static
	done
    else
	[ -n "$debug" ] && echo-stderr Student copy $student_notebook is fine
    fi
    # nothing else is required in the student's work area
    # the rest (modules for code, and media, data as specified in statics)
    # will be bind-mounted in the docker container
}

# a lot to say here:
# * it's unclear if we need to do the rsync here or not
#   some course might wish to provide their own custom*
# * the copy into a course-dependant location
#   looks extraneous but it might come in handy some day
# * finally this layout is painfully confusing..
# 
function check-course-jupyter() {
    [ -d $course_jupyter ] || mkdir -p $course_jupyter
    # temporary : if we find a file named 'DETACHED' in /nbhosting/jupyter/course/
    # then we leave that alone; otherwise, keep that in sync with our sources
    if [ -f $course_jupyter/DETACHED ]; then
	echo-stderr "Leaving jupyter material for $course intact (DETACHED found)"
    else
	for file in jupyter_notebook_config.py custom.js custom.css; do
	    rsync -tp $root/jupyter/$file $course_jupyter/
	done
    fi
}   

####################
# xxx probably a lot of space for improvement here
# retrieve port from output like this
# map[8888/tcp:[{0.0.0.0 32774}]]
function get-port-from-docker() {
    docker inspect --format '{{.NetworkSettings.Ports}}' $docker_name | cut -d' ' -f 2 | sed -e 's,[^0-9],,g'
}

# if the container was just started it may take a little time
# before we can know on what port it runs
# PS: it's not even clear it's useful to do this loop...
function find-port-number() {
    ticks=$1; shift
    period=$1; shift
    extra=$1; shift
    counter=1
    while [ $counter -le $ticks ]; do
	echo-stderr "Probing for port ($counter)"
	docker_port=$(get-port-from-docker)
	[ -n "$docker_port" ] && {
	    sleep $extra
	    echo $docker_port;
	    return 0;
	}
	counter=$(( $counter + 1))
	sleep $period
    done
    echo-stderr "find-port-number failed after $counter iterations"
    return 1
}

# in particular the actual timeout is unclear
function wait-for-http-on-port-token() {
    port=$1; shift
    token=$1; shift
    ticks=$1; shift
    period=$1; shift
    extra=$1; shift
    counter=1
    while [ $counter -le $ticks ]; do
	echo-stderr "Waiting for TCP ($counter) on port $port"
	# first check if tcp port is up
	if timeout 1 bash -c "cat < /dev/null > /dev/tcp/localhost/$port" 2> /dev/null; then
	    # if so, check that http is ready
	    echo-stderr "Checking for HTTP ($counter) on port $port"
	    curl "http://localhost:$port/tree?token=$token" >& /dev/null && {
		# sleep an extra .5 s to be safe
		sleep $extra
		echo-stderr HTTP OK
		return 0
	    }
	fi
	counter=$(( $counter + 1))
	sleep $period
    done
    echo-stderr "timeout expired after $counter iterations"
    return 1
}

####################
# we name the docker instance as <course>-x-<student>
# we create the container with docker create -p 8888
# this way the container can be stopped and then restarted
# with a fresh (unused) port each time
function run-docker-instance() {
    [ -n "$debug" ] && set -x

    # update jupyter_notebook_config.py and the 2 custom files
    check-course-jupyter

    # touch a file in the student's course dir
    # so the monitoring tool can spare it
    # <=> jupyter's root
    touch $student_course/.monitor

    #  exit with retcode != 0 if anything goes south
    set -e
    
    local jupyter_token=$docker_name
    # check if container docker_name is already defined
    # beware we are in a set -e section
    docker inspect --format "{{.Name}}" $docker_name >& /dev/null \
	&& { \
	     action="running-or-restarted"
	     # this is the case where docker inspect was successful
    } || { \
	   action="created"
	   # this now is when docker inspect fails
	   echo-stderr Creating docker container $docker_name
	   # * map host free port to fixed 8888 in container
	   # * bind  mounts so that the user's data is on
	   #   the host filesystem
	   # * map jovyan uid to the student's
	   #   from https://github.com/jupyter/docker-stacks/tree/master/scipy-notebook
	   #   this requires --user root and -e NB_UID=<id>
	   # * turn off this http header that otherwise would prevent embedding in a FUN iframe
	   #   Content-Security-Policy: frame-ancestors 'self'; report-uri /api/security/csp-report
	   #   so set the web server's settings to clear the Content-Security-Policy header
	   #   it is too tedious on the command line with quoting and all, so
	   #   let's use the config file instead
	   ### older notes
	   # * for turning off token auth, we would need to specify the command to run:
	   #    --NotebookApp.token=''
	   ##
	   # compute student uid
	   student_uid=$(id -u $student)
	   command="docker create --name $docker_name
	       -p 8888
	       --user root -e NB_UID=$student_uid
	       -v $student_course:/home/jovyan/work
               -v $course_modules:/home/jovyan/modules
	       -v $course_jupyter/jupyter_notebook_config.py:/home/jovyan/.jupyter/jupyter_notebook_config.py
	       -v $course_jupyter/custom.js:/home/jovyan/.jupyter/custom/custom.js
	       -v $course_jupyter/custom.css:/home/jovyan/.jupyter/custom/custom.css"
	   for static in $statics; do
	       command="$command -v $root/static/$course/$static:/home/jovyan/work/$static"
	   done
	   command="$command
	       -e PYTHONPATH=/home/jovyan/modules
	       $docker_image 
	       start-notebook.sh
	       --no-browser 
	       --NotebookApp.token=$jupyter_token 
	       --log-level=DEBUG"
	   # show command for manual debugging
	   echo-stderr XXXXXXXXXX $command
	   # we need a clean stdout : redirect stdout to stderr 
	   >&2 $command
    }

    ### at that point the docker is expected to be created
    # so: start the container only if it needs to, and in that
    # case wait until it's up and reachable
    running=$(docker inspect -f "{{.State.Running}}" $docker_name)
    # refine action if this container was not just created
    if [ $action == "running-or-restarted" ]; then
	action=$([ "$running" == true ] && echo running || echo restarted)
    fi
    
    # actually restart if needed
    if [ "$running" != "true" ]; then
	echo-stderr Starting container $docker_name
	# prevent clobbering of stdout
	>&2 docker start $docker_name
    fi

    # figure out on what port it runs; wait for a second (10 times .1)
    docker_port=$(find-port-number $timeout_wait_for_port)

    # wait until the service actually serves HTTP requests
    # we need to do this only if we have just started it
    if [ "$running" != "true" ]; then
	wait-for-http-on-port-token $docker_port $jupyter_token $timeout_wait_for_http
    fi

    # this is the only thing that goes on stdout
    #
    echo $action $docker_name $docker_port $jupyter_token

    [ -n "$debug" ] && set +x
}

function main() {
    echo-stderr "========== $(date) run-student-course-jupyter $course $student"
    check-student-notebook
    run-docker-instance
}

# we always leave stdout alone as it's the outcome of this script
# but as far as stderr, we want to log it *and* to return it in stderr
main 2> >(tee -a $log >&2) || :

exit 0
